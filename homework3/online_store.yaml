openapi: 3.0.3
info:
  title: Shop
  version: 1.0.0
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
    Item:
      type: object
      properties:
        id: 
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int64
        image_link:
          type: string
    Order:
      type: object
      properties:
        id: 
          type: integer
          format: int64
        user:
          type: object
          properties:
            schema:
               $ref: '#/components/schemas/User'
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        status:
          type: string
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: "header"
      name: api_key
paths:
  /user/login:
    post:
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query 
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers: 
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    post:
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: Successful logout
          content: {}
  /items:
    post:
      summary: Add a new item to the store
      operationId: CreateItem
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/Item'
      parameters:
      - in: query
        name: body
        description: Item object than needs to be added to the store
        required: true
        schema:
          $ref: '#/components/schemas/Item'
      responses:
        405:
          description: Invalid input
      security:
        - ApiKeyAuth: []
    get:
      summary: Lists Items with filters
      operationId: ListItems
      parameters:
      - name: price_min
        in: query
        description: Lower price limit
        required: false
        schema:
          type: integer
          format: int64
      - name: price_max
        in: query
        description: Upper price limit
        required: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        400:
          description: Invalid price range
          content: {}
  /items/{itemId}/upload_image:
    post:
      summary: Uploads an image
      operationId: uploadFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  type: array
                  items:
                    type: string
                    format: binary
      parameters:
      - name: itemId
        in: path
        description: Item ID to upload an image
        required: true
        schema:
          type: integer
          format: int64
      - name: file
        in: query
        description: file to upload
        required: true
        schema:
          type: string
      responses:
        405:
          description: Invalid input
  /order:
    post:
      summary: Make an order
      operationId: makeNewOrder
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/Order'
      parameters:
      - in: query
        name: body
        description: Order object than needs to be added to the store
        required: true
        schema:
          $ref: '#/components/schemas/Order'
      responses:
        405:
          description: Invalid input
          content: {}
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
  /order/{orderId}:
    get:
      summary: Find order by ID
      operationId: GetOrder
      parameters:
      - name: orderId
        in: path
        description: ID of order to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid ID supplied
          content: {}
    put:
      summary: Updates an order in the store
      operationId: UpdateOrder
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema: 
              properties:
                name:
                  type: string
                  description: Updated list of the items in order
                status:
                  type: string
                  description: Updated status of the order
      responses:
        405:
          description: Invalid input
          content: {}
      security:
        - ApiKeyAuth: []
    delete:
      summary: Deletes an order
      operationId: DeleteOrder
      parameters:
      - name: orderId
        in: path
        description: Order if to delete
        required: true
        schema: 
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Order not found
          content: {}
      security:
        - ApiKeyAuth: []
  /items/{itemId}:
    get:
      summary: Find item by ID
      operationId: GetItem
      parameters:
      - name: itemId
        in: path
        description: ID of item to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: Invalid ID supplied
          content: {}
    put:
      summary: Updates a item in the store with form data
      operationId: UpdateItem
      parameters:
      - name: itemId
        in: path
        description: ID of the item that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema: 
              properties:
                name:
                  type: string
                  description: UPdated name of the item
                status:
                  type: string
                  description: Updated status of the item
      responses:
        405:
          description: Invalid input
          content: {}
      security:
        - ApiKeyAuth: []
    delete:
      summary: Deletes an item
      operationId: DeleteItem
      parameters:
      - name: itemId
        in: path
        description: Item if to delete
        required: true
        schema: 
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Item not found
          content: {}
      security:
        - ApiKeyAuth: []